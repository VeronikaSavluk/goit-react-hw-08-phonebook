{"version":3,"file":"static/js/234.e3686868.chunk.js","mappings":"qRAEaA,EAAYC,EAAAA,GAAAA,IAAH,sJASTC,EAAQD,EAAAA,GAAAA,GAAH,gEAKLE,EAAYF,EAAAA,GAAAA,IAAH,4DAITG,EAAeH,EAAAA,GAAAA,EAAH,0C,sGClBrBI,EAAY,YAgFT,IAAIC,EAAuB,SAA8BC,EAAGC,GACjE,OAAOD,IAAMC,CACd,EAqBM,SAASC,EAAeC,EAAMC,GACnC,IAAIC,EAAoD,kBAA3BD,EAAsCA,EAAyB,CAC1FE,cAAeF,GAEbG,EAAwBF,EAAgBC,cACxCA,OAA0C,IAA1BC,EAAmCR,EAAuBQ,EAC1EC,EAAwBH,EAAgBI,QACxCA,OAAoC,IAA1BD,EAAmC,EAAIA,EACjDE,EAAsBL,EAAgBK,oBACtCC,EA7BC,SAAkCL,GACvC,OAAO,SAAoCM,EAAMC,GAC/C,GAAa,OAATD,GAA0B,OAATC,GAAiBD,EAAKE,SAAWD,EAAKC,OACzD,OAAO,EAMT,IAFA,IAAIA,EAASF,EAAKE,OAETC,EAAI,EAAGA,EAAID,EAAQC,IAC1B,IAAKT,EAAcM,EAAKG,GAAIF,EAAKE,IAC/B,OAAO,EAIX,OAAO,CACR,CACF,CAYkBC,CAAyBV,GACtCW,EAAoB,IAAZR,EA/Gd,SAA8BS,GAC5B,IAAIC,EACJ,MAAO,CACLC,IAAK,SAAaC,GAChB,OAAIF,GAASD,EAAOC,EAAME,IAAKA,GACtBF,EAAMG,MAGRxB,CACR,EACDyB,IAAK,SAAaF,EAAKC,GACrBH,EAAQ,CACNE,IAAKA,EACLC,MAAOA,EAEV,EACDE,WAAY,WACV,OAAOL,EAAQ,CAACA,GAAS,EAC1B,EACDM,MAAO,WACLN,OAAQO,CACT,EAEJ,CAwF6BC,CAAqBhB,GAtFnD,SAAwBF,EAASS,GAC/B,IAAIU,EAAU,GAEd,SAASR,EAAIC,GACX,IAAIQ,EAAaD,EAAQE,WAAU,SAAUX,GAC3C,OAAOD,EAAOG,EAAKF,EAAME,IAC1B,IAED,GAAIQ,GAAc,EAAG,CACnB,IAAIV,EAAQS,EAAQC,GAOpB,OALIA,EAAa,IACfD,EAAQG,OAAOF,EAAY,GAC3BD,EAAQI,QAAQb,IAGXA,EAAMG,KACd,CAGD,OAAOxB,CACR,CAwBD,MAAO,CACLsB,IAAKA,EACLG,IAxBF,SAAaF,EAAKC,GACZF,EAAIC,KAASvB,IAEf8B,EAAQI,QAAQ,CACdX,IAAKA,EACLC,MAAOA,IAGLM,EAAQd,OAASL,GACnBmB,EAAQK,MAGb,EAaCT,WAXF,WACE,OAAOI,CACR,EAUCH,MARF,WACEG,EAAU,EACX,EAQF,CAmCgEM,CAAezB,EAASE,GAEvF,SAASwB,IACP,IAAIb,EAAQL,EAAMG,IAAIgB,WAEtB,GAAId,IAAUxB,EAAW,CAIvB,GAFAwB,EAAQnB,EAAKkC,MAAM,KAAMD,WAErB1B,EAAqB,CACvB,IAAIkB,EAAUX,EAAMO,aAChBc,EAAgBV,EAAQW,MAAK,SAAUpB,GACzC,OAAOT,EAAoBS,EAAMG,MAAOA,EACzC,IAEGgB,IACFhB,EAAQgB,EAAchB,MAEzB,CAEDL,EAAMM,IAAIa,UAAWd,EACtB,CAED,OAAOA,CACR,CAMD,OAJAa,EAASK,WAAa,WACpB,OAAOvB,EAAMQ,OACd,EAEMU,CACR,CC/ID,SAASM,EAAgBC,GACvB,IAAIC,EAAeC,MAAMC,QAAQH,EAAM,IAAMA,EAAM,GAAKA,EAExD,IAAKC,EAAaG,OAAM,SAAUC,GAChC,MAAsB,oBAARA,CACf,IAAG,CACF,IAAIC,EAAkBL,EAAaM,KAAI,SAAUF,GAC/C,MAAsB,oBAARA,EAAqB,aAAeA,EAAIG,MAAQ,WAAa,YAAcH,CAC1F,IAAEI,KAAK,MACR,MAAM,IAAIC,MAAM,kGAAoGJ,EAAkB,IACvI,CAED,OAAOL,CACR,CAEM,SAASU,EAAsBC,GACpC,IAAK,IAAIC,EAAOnB,UAAUtB,OAAQ0C,EAAyB,IAAIZ,MAAMW,EAAO,EAAIA,EAAO,EAAI,GAAIE,EAAO,EAAGA,EAAOF,EAAME,IACpHD,EAAuBC,EAAO,GAAKrB,UAAUqB,GAG/C,IAAIC,EAAiB,WACnB,IAAK,IAAIC,EAAQvB,UAAUtB,OAAQ4B,EAAQ,IAAIE,MAAMe,GAAQC,EAAQ,EAAGA,EAAQD,EAAOC,IACrFlB,EAAMkB,GAASxB,UAAUwB,GAG3B,IAEIC,EAFAC,EAAkB,EAOlBC,EAAwB,CAC1BC,oBAAgBtC,GAGduC,EAAavB,EAAMT,MAQvB,GAN0B,kBAAfgC,IACTF,EAAwBE,EAExBA,EAAavB,EAAMT,OAGK,oBAAfgC,EACT,MAAM,IAAIb,MAAM,qFAAuFa,EAAa,KAKtH,IAAIC,EAAwBH,EACxBI,EAAyBD,EAAsBF,eAC/CA,OAA4C,IAA3BG,EAAoCX,EAAyBW,EAM9EC,EAAsBxB,MAAMC,QAAQmB,GAAkBA,EAAiB,CAACA,GACxErB,EAAeF,EAAgBC,GAC/B2B,EAAqBf,EAAQjB,WAAM,EAAQ,CAAC,WAG9C,OAFAyB,IAEOG,EAAW5B,MAAM,KAAMD,UAC/B,GAAEkC,OAAOF,IAENG,EAAWjB,GAAQ,WAIrB,IAHA,IAAIkB,EAAS,GACT1D,EAAS6B,EAAa7B,OAEjBC,EAAI,EAAGA,EAAID,EAAQC,IAG1ByD,EAAOC,KAAK9B,EAAa5B,GAAGsB,MAAM,KAAMD,YAK1C,OADAyB,EAAcQ,EAAmBhC,MAAM,KAAMmC,EAE9C,IAeD,OAdAE,OAAOC,OAAOJ,EAAU,CACtBN,WAAYA,EACZI,mBAAoBA,EACpB1B,aAAcA,EACdiC,WAAY,WACV,OAAOf,CACR,EACDgB,eAAgB,WACd,OAAOf,CACR,EACDgB,oBAAqB,WACnB,OAAOhB,EAAkB,CAC1B,IAEIS,CACR,EAGD,OAAOb,CACR,CACM,IAAIA,EAAgCL,EAAsBnD,GCrGpD6E,EAAc,SAAAC,GAAK,OAAIA,EAAMC,SAASC,KAAnB,EACnBC,EAAkB,SAAAH,GAAK,OAAIA,EAAMC,SAASG,SAAnB,EACvBC,EAAc,SAAAL,GAAK,OAAIA,EAAMC,SAASK,KAAnB,EAGnBC,EAAwB7B,EACnC,CAACqB,EAHyB,SAAAC,GAAK,OAAIA,EAAMQ,MAAV,IAI/B,SAACN,EAAOO,GACN,OAAQA,IACDA,EACIP,EAAMM,QAAO,SAAAE,GAAO,OAAIA,EAAQxC,KAAKyC,cAAcC,SAASH,EAAxC,IAEpBP,CAEZ,I,yFCCGW,GAAcC,EAAAA,EAAAA,MACdC,GAAgBD,EAAAA,EAAAA,MAChBE,EAAgB,CAClB9C,KAAM,GACN+C,OAAQ,IAGNC,EAASC,EAAAA,KAAaC,MAAM,CAC9BlD,KAAMiD,EAAAA,KAAaE,WACnBJ,OAAQE,EAAAA,KAAaE,aAgFzB,MA7EA,WACI,IAAMC,GAAWC,EAAAA,EAAAA,MACXrB,GAAQsB,EAAAA,EAAAA,IAAYzB,GAU1B,OACI,SAAC,KAAD,CAAM0B,UAAU,SACZC,MAAM,SACNC,EAAG,IAAKC,EAAG,GACXC,OAAQ,EACRC,YAAY,UACZC,YAAY,QACZC,aAAc,GANlB,UAQI,SAAC,KAAD,CACAhB,cAAeA,EACfiB,iBAAkBf,EACdgB,SArBS,SAACC,EAAD,GAA4B,IAAjBC,EAAgB,EAAhBA,UACxBlC,EAAM3C,MAAK,SAAAmD,GAAO,OAAIA,EAAQxC,OAASiE,EAAOjE,IAA5B,IAClBmE,MAAM,GAAD,OAAIF,EAAOjE,KAAX,6BAGToD,GAASgB,EAAAA,EAAAA,IAAWH,IACpBC,IACH,EAWO,SAIK,SAACG,GAAD,OACG,UAAC,KAAD,YACI,SAAC,KAAD,CACIC,KAAK,OACLtE,KAAK,OACLuE,QAAQ,yHACRC,MAAM,yIACNC,GAAI9B,EALR,SAOK,gBAAG+B,EAAH,EAAGA,MAAOC,EAAV,EAAUA,KAAV,OACG,UAAC,KAAD,CAAaC,UAAWD,EAAKE,OAAO7E,MAAQ2E,EAAKG,QAAQ9E,KAAzD,WACI,SAAC,KAAD,CAAW+E,QAASpC,EAAaqC,GAAI,GAArC,mBACA,SAAC,MAAD,kBAAWN,GAAX,IAAkBM,GAAI,GAAItB,EAAG,MAC7B,SAAC,KAAD,UAAmBiB,EAAKE,OAAO7E,SAJtC,KAQL,SAAC,KAAD,CACIsE,KAAK,MACLtE,KAAK,SACLuE,QAAQ,yFACRC,MAAM,+FACNC,GAAI5B,EALR,SAOK,gBAAG6B,EAAH,EAAGA,MAAOC,EAAV,EAAUA,KAAV,OACG,UAAC,KAAD,CAAaC,UAAWD,EAAKE,OAAO7E,MAAQ2E,EAAKG,QAAQ9E,KAAzD,WACI,SAAC,KAAD,CAAW+E,QAASlC,EAAemC,GAAI,GAAvC,qBACA,SAAC,MAAD,kBAAWN,GAAX,IAAkBM,GAAI,GAAItB,EAAG,MAC7B,SAAC,KAAD,UAAmBiB,EAAKE,OAAO7E,SAJtC,KAQL,SAAC,KAAD,CAAQ0D,EAAG,EAAGuB,GAAG,OAAOD,GAAI,GACxBvB,EAAG,IAAKyB,WAAW,MACnBvB,OAAQ,EAAGE,YAAY,QACvBD,YAAY,YAAYE,aAAc,GACtCqB,GAAG,YAAYC,MAAM,UACrBd,KAAK,SAAStE,KAAK,cALvB,2BAhCP,KA4ChB,E,UCjED,EA3B0B,WACtB,IAAMqF,GAAezC,EAAAA,EAAAA,MACfQ,GAAWC,EAAAA,EAAAA,MAQjB,OACI,SAAC,KAAD,CAAK2B,GAAI,GAAIrB,OAAO,OAAOG,aAAc,EAAzC,UACI,SAAC,KAAD,CAAOwB,YAAY,wBACfhB,KAAK,OACLtE,KAAK,QACLyE,GAAIY,EACJE,SAZS,SAAAC,GACjBA,EAAEC,iBACF,IAAMd,EAAOa,EAAEE,OACftC,GAASb,EAAAA,EAAAA,GAAUoC,EAAKvG,MAAMqE,eACjC,KAYJ,E,UCmBD,EAjCoB,WAChB,IAAMW,GAAWC,EAAAA,EAAAA,MACXsC,GAAkBrC,EAAAA,EAAAA,IAAYjB,GAEpC,OACI,SAAC,KAAD,UACKsD,EAAgB5F,KAAI,gBAAG0E,EAAH,EAAGA,GAAIzE,EAAP,EAAOA,KAAM+C,EAAb,EAAaA,OAAb,OACjB,SAAC,KAAD,WACI,UAAC,KAAD,CAAM6C,cAAa,uBACfC,gBAAgB,iBAChBC,IAAI,IAFR,WAGI,UAAC,KAAD,CAAUC,QAAS,EAAGC,GAAI,EAAGC,KAAM,OAAnC,UAA4CjG,EAA5C,QACA,SAAC,KAAD,CAAU+F,QAAS,EAAGC,GAAI,EAAGC,KAAM,SAAnC,SAA8ClD,KAC9C,SAAC,KAAD,CAAUgD,QAAS,EAAGE,KAAM,SAA5B,UACI,SAAC,KAAD,CAAQC,QAAS,kBAAM9C,GAAS+C,EAAAA,EAAAA,IAAc1B,GAA7B,EAAjB,0BAPGA,EADE,KAehC,E,UCCD,EAxBiB,WACb,IAAMrB,GAAWC,EAAAA,EAAAA,MACXnB,GAAYoB,EAAAA,EAAAA,IAAYrB,GACxBG,GAAQkB,EAAAA,EAAAA,IAAYnB,GAM1B,OAJAiE,EAAAA,EAAAA,YAAU,WACNhD,GAASiD,EAAAA,EAAAA,MACZ,GAAE,CAACjD,KAGA,UAAC,KAAD,YACI,uCACA,SAAC,EAAD,KACA,SAAC,KAAD,wBACA,SAAC,EAAD,KACA,UAAC,KAAD,WACKlB,IAAcE,IAAS,SAACkE,EAAA,EAAD,IACvBlE,IAAS,SAAC,KAAD,UAAeA,QAE7B,SAAC,EAAD,MAGX,C","sources":["components/Container.styled.js","../node_modules/reselect/es/defaultMemoize.js","../node_modules/reselect/es/index.js","redux/contacts/selectors.js","components/ContactForm.js","components/FilterContactListItem.js","components/ContactList.js","page/Contacts.js"],"sourcesContent":["import styled from 'styled-components';\n\nexport const Container = styled.div`\ndisplay: flex;\nflex-direction: column;\nmargin: 0;\npadding: 20px;\nwidth: 320px;\nmin-height: 796px;\nbackground: #8FBC8F;\n`;\nexport const Title = styled.h2`\nmargin-botton: 10px;\nfont-size: 18px;\n`;\n\nexport const LoaderBox = styled.div`\nheight: 18px;\ntext-align: center;\n`;\nexport const ErrorMessage = styled.p`\n font-size: 16px;\n`;","// Cache implementation based on Erik Rasmussen's `lru-memoize`:\n// https://github.com/erikras/lru-memoize\nvar NOT_FOUND = 'NOT_FOUND';\n\nfunction createSingletonCache(equals) {\n  var entry;\n  return {\n    get: function get(key) {\n      if (entry && equals(entry.key, key)) {\n        return entry.value;\n      }\n\n      return NOT_FOUND;\n    },\n    put: function put(key, value) {\n      entry = {\n        key: key,\n        value: value\n      };\n    },\n    getEntries: function getEntries() {\n      return entry ? [entry] : [];\n    },\n    clear: function clear() {\n      entry = undefined;\n    }\n  };\n}\n\nfunction createLruCache(maxSize, equals) {\n  var entries = [];\n\n  function get(key) {\n    var cacheIndex = entries.findIndex(function (entry) {\n      return equals(key, entry.key);\n    }); // We found a cached entry\n\n    if (cacheIndex > -1) {\n      var entry = entries[cacheIndex]; // Cached entry not at top of cache, move it to the top\n\n      if (cacheIndex > 0) {\n        entries.splice(cacheIndex, 1);\n        entries.unshift(entry);\n      }\n\n      return entry.value;\n    } // No entry found in cache, return sentinel\n\n\n    return NOT_FOUND;\n  }\n\n  function put(key, value) {\n    if (get(key) === NOT_FOUND) {\n      // TODO Is unshift slow?\n      entries.unshift({\n        key: key,\n        value: value\n      });\n\n      if (entries.length > maxSize) {\n        entries.pop();\n      }\n    }\n  }\n\n  function getEntries() {\n    return entries;\n  }\n\n  function clear() {\n    entries = [];\n  }\n\n  return {\n    get: get,\n    put: put,\n    getEntries: getEntries,\n    clear: clear\n  };\n}\n\nexport var defaultEqualityCheck = function defaultEqualityCheck(a, b) {\n  return a === b;\n};\nexport function createCacheKeyComparator(equalityCheck) {\n  return function areArgumentsShallowlyEqual(prev, next) {\n    if (prev === null || next === null || prev.length !== next.length) {\n      return false;\n    } // Do this in a for loop (and not a `forEach` or an `every`) so we can determine equality as fast as possible.\n\n\n    var length = prev.length;\n\n    for (var i = 0; i < length; i++) {\n      if (!equalityCheck(prev[i], next[i])) {\n        return false;\n      }\n    }\n\n    return true;\n  };\n}\n// defaultMemoize now supports a configurable cache size with LRU behavior,\n// and optional comparison of the result value with existing values\nexport function defaultMemoize(func, equalityCheckOrOptions) {\n  var providedOptions = typeof equalityCheckOrOptions === 'object' ? equalityCheckOrOptions : {\n    equalityCheck: equalityCheckOrOptions\n  };\n  var _providedOptions$equa = providedOptions.equalityCheck,\n      equalityCheck = _providedOptions$equa === void 0 ? defaultEqualityCheck : _providedOptions$equa,\n      _providedOptions$maxS = providedOptions.maxSize,\n      maxSize = _providedOptions$maxS === void 0 ? 1 : _providedOptions$maxS,\n      resultEqualityCheck = providedOptions.resultEqualityCheck;\n  var comparator = createCacheKeyComparator(equalityCheck);\n  var cache = maxSize === 1 ? createSingletonCache(comparator) : createLruCache(maxSize, comparator); // we reference arguments instead of spreading them for performance reasons\n\n  function memoized() {\n    var value = cache.get(arguments);\n\n    if (value === NOT_FOUND) {\n      // @ts-ignore\n      value = func.apply(null, arguments);\n\n      if (resultEqualityCheck) {\n        var entries = cache.getEntries();\n        var matchingEntry = entries.find(function (entry) {\n          return resultEqualityCheck(entry.value, value);\n        });\n\n        if (matchingEntry) {\n          value = matchingEntry.value;\n        }\n      }\n\n      cache.put(arguments, value);\n    }\n\n    return value;\n  }\n\n  memoized.clearCache = function () {\n    return cache.clear();\n  };\n\n  return memoized;\n}","import { defaultMemoize, defaultEqualityCheck } from './defaultMemoize';\nexport { defaultMemoize, defaultEqualityCheck };\n\nfunction getDependencies(funcs) {\n  var dependencies = Array.isArray(funcs[0]) ? funcs[0] : funcs;\n\n  if (!dependencies.every(function (dep) {\n    return typeof dep === 'function';\n  })) {\n    var dependencyTypes = dependencies.map(function (dep) {\n      return typeof dep === 'function' ? \"function \" + (dep.name || 'unnamed') + \"()\" : typeof dep;\n    }).join(', ');\n    throw new Error(\"createSelector expects all input-selectors to be functions, but received the following types: [\" + dependencyTypes + \"]\");\n  }\n\n  return dependencies;\n}\n\nexport function createSelectorCreator(memoize) {\n  for (var _len = arguments.length, memoizeOptionsFromArgs = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n    memoizeOptionsFromArgs[_key - 1] = arguments[_key];\n  }\n\n  var createSelector = function createSelector() {\n    for (var _len2 = arguments.length, funcs = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n      funcs[_key2] = arguments[_key2];\n    }\n\n    var _recomputations = 0;\n\n    var _lastResult; // Due to the intricacies of rest params, we can't do an optional arg after `...funcs`.\n    // So, start by declaring the default value here.\n    // (And yes, the words 'memoize' and 'options' appear too many times in this next sequence.)\n\n\n    var directlyPassedOptions = {\n      memoizeOptions: undefined\n    }; // Normally, the result func or \"output selector\" is the last arg\n\n    var resultFunc = funcs.pop(); // If the result func is actually an _object_, assume it's our options object\n\n    if (typeof resultFunc === 'object') {\n      directlyPassedOptions = resultFunc; // and pop the real result func off\n\n      resultFunc = funcs.pop();\n    }\n\n    if (typeof resultFunc !== 'function') {\n      throw new Error(\"createSelector expects an output function after the inputs, but received: [\" + typeof resultFunc + \"]\");\n    } // Determine which set of options we're using. Prefer options passed directly,\n    // but fall back to options given to createSelectorCreator.\n\n\n    var _directlyPassedOption = directlyPassedOptions,\n        _directlyPassedOption2 = _directlyPassedOption.memoizeOptions,\n        memoizeOptions = _directlyPassedOption2 === void 0 ? memoizeOptionsFromArgs : _directlyPassedOption2; // Simplifying assumption: it's unlikely that the first options arg of the provided memoizer\n    // is an array. In most libs I've looked at, it's an equality function or options object.\n    // Based on that, if `memoizeOptions` _is_ an array, we assume it's a full\n    // user-provided array of options. Otherwise, it must be just the _first_ arg, and so\n    // we wrap it in an array so we can apply it.\n\n    var finalMemoizeOptions = Array.isArray(memoizeOptions) ? memoizeOptions : [memoizeOptions];\n    var dependencies = getDependencies(funcs);\n    var memoizedResultFunc = memoize.apply(void 0, [function recomputationWrapper() {\n      _recomputations++; // apply arguments instead of spreading for performance.\n\n      return resultFunc.apply(null, arguments);\n    }].concat(finalMemoizeOptions)); // If a selector is called with the exact same arguments we don't need to traverse our dependencies again.\n\n    var selector = memoize(function dependenciesChecker() {\n      var params = [];\n      var length = dependencies.length;\n\n      for (var i = 0; i < length; i++) {\n        // apply arguments instead of spreading and mutate a local list of params for performance.\n        // @ts-ignore\n        params.push(dependencies[i].apply(null, arguments));\n      } // apply arguments instead of spreading for performance.\n\n\n      _lastResult = memoizedResultFunc.apply(null, params);\n      return _lastResult;\n    });\n    Object.assign(selector, {\n      resultFunc: resultFunc,\n      memoizedResultFunc: memoizedResultFunc,\n      dependencies: dependencies,\n      lastResult: function lastResult() {\n        return _lastResult;\n      },\n      recomputations: function recomputations() {\n        return _recomputations;\n      },\n      resetRecomputations: function resetRecomputations() {\n        return _recomputations = 0;\n      }\n    });\n    return selector;\n  }; // @ts-ignore\n\n\n  return createSelector;\n}\nexport var createSelector = /* #__PURE__ */createSelectorCreator(defaultMemoize);\n// Manual definition of state and output arguments\nexport var createStructuredSelector = function createStructuredSelector(selectors, selectorCreator) {\n  if (selectorCreator === void 0) {\n    selectorCreator = createSelector;\n  }\n\n  if (typeof selectors !== 'object') {\n    throw new Error('createStructuredSelector expects first argument to be an object ' + (\"where each property is a selector, instead received a \" + typeof selectors));\n  }\n\n  var objectKeys = Object.keys(selectors);\n  var resultSelector = selectorCreator( // @ts-ignore\n  objectKeys.map(function (key) {\n    return selectors[key];\n  }), function () {\n    for (var _len3 = arguments.length, values = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {\n      values[_key3] = arguments[_key3];\n    }\n\n    return values.reduce(function (composition, value, index) {\n      composition[objectKeys[index]] = value;\n      return composition;\n    }, {});\n  });\n  return resultSelector;\n};","import { createSelector } from \"@reduxjs/toolkit\";\n\nexport const selectItems = state => state.contacts.items;\nexport const selectIsLoading = state => state.contacts.isLoading;\nexport const selectError = state => state.contacts.error;\nexport const selectFilter = state => state.filter;\n\nexport const selectVisibleContacts = createSelector(\n  [selectItems, selectFilter],\n  (items, setFilter) => {\n    switch (setFilter) {\n      case setFilter:\n        return items.filter(contact => contact.name.toLowerCase().includes(setFilter));\n      default:\n        return items;\n    }\n  }\n);","import PropTypes from \"prop-types\";\nimport { useDispatch } from \"react-redux\";\nimport {addContact} from \"redux/contacts/operations\";\nimport { useSelector } from \"react-redux\";\nimport { selectItems } from \"redux/contacts/selectors\";\nimport { nanoid } from \"nanoid\";\nimport { Formik, Form, Field } from \"formik\";\nimport * as yup from \"yup\";\nimport {\n    FormControl,\n    FormLabel,\n    Input,\n    Button,\n    FormErrorMessage,\n    Flex\n} from \"@chakra-ui/react\";\n\nconst NameInputId = nanoid();\nconst NumberInputId = nanoid();\nconst initialValues = {\n    name: '',\n    number: ''\n};\n\nconst schema = yup.object().shape({\n    name: yup.string().required(),\n    number: yup.string().required(),\n});\n\nfunction ContactForm() {\n    const dispatch = useDispatch();\n    const items = useSelector(selectItems);\n    const handleSubmit = (values, { resetForm }) => {\n        if (items.find(contact => contact.name === values.name)) {\n            alert(`${values.name} is already in contacts`);\n            return;\n        };\n        dispatch(addContact(values));\n        resetForm();\n    };\n\n    return (\n        <Flex direction='column'\n            align='center'\n            w={300} p={10}\n            border={2}\n            borderColor='#FFFFF0'\n            borderStyle='solid'\n            borderRadius={15}\n        >\n            <Formik\n            initialValues={initialValues}\n            validationSchema={schema}\n                onSubmit={handleSubmit}>\n                {(props) => (\n                    <Form >\n                        <Field\n                            type=\"text\"\n                            name=\"name\"\n                            pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n                            title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n                            id={NameInputId}\n                        >\n                            {({ field, form }) => (\n                                <FormControl isInvalid={form.errors.name && form.touched.name}>\n                                    <FormLabel htmlFor={NameInputId} mb={10}>Name</FormLabel>\n                                    <Input {...field} mb={10} p={4} />\n                                    <FormErrorMessage>{form.errors.name}</FormErrorMessage>\n                                </FormControl>\n                            )}\n                        </Field>\n                        <Field\n                            type=\"tel\"\n                            name=\"number\"\n                            pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n                            title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n                            id={NumberInputId}\n                        >\n                            {({ field, form }) => (\n                                <FormControl isInvalid={form.errors.name && form.touched.name}>\n                                    <FormLabel htmlFor={NumberInputId} mb={10}>Number</FormLabel>\n                                    <Input {...field} mb={10} p={4} />\n                                    <FormErrorMessage>{form.errors.name}</FormErrorMessage>\n                                </FormControl>\n                            )}\n                        </Field>\n                        <Button p={2} mx='auto' mb={10}\n                            w={100} fontWeight='900'\n                            border={1} borderStyle='solid'\n                            borderColor='#f1b61ff1' borderRadius={15}\n                            bg='#f1b61ff1' color='#4d4c4c'\n                            type=\"submit\" name=\"Add contact\">Add contact\n                        </Button>\n                    </Form>\n                )}\n            </Formik>\n        </Flex>\n    );\n}\n\nContactForm.propTypes = {\n    handleSubmit: PropTypes.func,\n    NameInputId: PropTypes.func,\n    NumberInputId: PropTypes.func,\n}\n\nexport default ContactForm;","import PropTypes from \"prop-types\";\nimport { useDispatch } from \"react-redux\";\nimport { setFilter } from \"../redux/contacts/filterSlice\";\nimport { nanoid } from \"nanoid\";\nimport { Box, Input } from '@chakra-ui/react';\n\nconst FilterContactList = () => {\n    const QueryInputId = nanoid();\n    const dispatch = useDispatch();\n\n    const handleChange = e => {\n        e.preventDefault();\n        const form = e.target;\n        dispatch(setFilter(form.value.toLowerCase()));\n    };\n\n    return (\n        <Box mb={10} border=\"none\" borderRadius={5}>\n            <Input placeholder='Find contacts by name'\n                type=\"text\"\n                name=\"value\"\n                id={QueryInputId}\n                onChange={handleChange}\n        />\n        </Box>\n    )\n}\n\nFilterContactList.propTypes = {\n    handleChange: PropTypes.func,\n    QueryInputId: PropTypes.func,\n}\n\nexport default FilterContactList;","import PropTypes from \"prop-types\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { selectVisibleContacts } from \"redux/contacts/selectors\";\nimport {deleteContact} from \"redux/contacts/operations\";\nimport {\n    List,\n    ListItem,\n    Grid,\n    GridItem,\n    Button\n} from '@chakra-ui/react';\n\nconst ContactList = () => {\n    const dispatch = useDispatch();\n    const visibleContacts = useSelector(selectVisibleContacts);\n\n    return (\n        <List>\n            {visibleContacts.map(({ id, name, number }) => (\n                <ListItem key={id}>\n                    <Grid templateAreas={`'name number button'`}\n                        templateColumns='repeat(5, 1fr)'\n                        gap='1'>\n                        <GridItem colSpan={2} pl={3} area={'name'}>{name}:</GridItem>\n                        <GridItem colSpan={2} pl={3} area={'number'}>{number}</GridItem>\n                        <GridItem colSpan={1} area={'button'}>\n                            <Button onClick={() => dispatch(deleteContact(id))}>Delete</Button>\n                        </GridItem>\n                    </Grid>\n                </ListItem>\n            ))}\n        </List>\n    );\n};\n\nContactList.propTypes = {\n    visibleContacts: PropTypes.arrayOf(\n        PropTypes.exact({\n            name: PropTypes.string.isRequired,\n            number: PropTypes.string.isRequired,\n            id: PropTypes.string,\n        }),\n    ),\n};\n\nexport default ContactList;","import { useEffect } from \"react\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport {fetchContacts} from \"redux/contacts/operations\";\nimport { selectIsLoading, selectError } from \"redux/contacts/selectors\";\nimport ContactForm from \"components/ContactForm\";\nimport FilterContactList from 'components/FilterContactListItem';\nimport Loader from \"components/Loader\";\nimport ContactList from \"components/ContactList\";\nimport { Container, Title, LoaderBox, ErrorMessage } from \"components/Container.styled\";\n\nconst Contacts = () => {\n    const dispatch = useDispatch();\n    const isLoading = useSelector(selectIsLoading);\n    const error = useSelector(selectError);\n\n    useEffect(() => {\n        dispatch(fetchContacts());\n    }, [dispatch]);\n\n    return (\n        <Container>\n            <h1>Phonebook</h1>\n            <ContactForm />\n            <Title>Contacts</Title>\n            <FilterContactList />\n            <LoaderBox>\n                {isLoading && !error && <Loader />}\n                {error && <ErrorMessage>{error}</ErrorMessage>}\n            </LoaderBox>\n            <ContactList />\n        </Container>\n    );\n};\n\nexport default Contacts;"],"names":["Container","styled","Title","LoaderBox","ErrorMessage","NOT_FOUND","defaultEqualityCheck","a","b","defaultMemoize","func","equalityCheckOrOptions","providedOptions","equalityCheck","_providedOptions$equa","_providedOptions$maxS","maxSize","resultEqualityCheck","comparator","prev","next","length","i","createCacheKeyComparator","cache","equals","entry","get","key","value","put","getEntries","clear","undefined","createSingletonCache","entries","cacheIndex","findIndex","splice","unshift","pop","createLruCache","memoized","arguments","apply","matchingEntry","find","clearCache","getDependencies","funcs","dependencies","Array","isArray","every","dep","dependencyTypes","map","name","join","Error","createSelectorCreator","memoize","_len","memoizeOptionsFromArgs","_key","createSelector","_len2","_key2","_lastResult","_recomputations","directlyPassedOptions","memoizeOptions","resultFunc","_directlyPassedOption","_directlyPassedOption2","finalMemoizeOptions","memoizedResultFunc","concat","selector","params","push","Object","assign","lastResult","recomputations","resetRecomputations","selectItems","state","contacts","items","selectIsLoading","isLoading","selectError","error","selectVisibleContacts","filter","setFilter","contact","toLowerCase","includes","NameInputId","nanoid","NumberInputId","initialValues","number","schema","yup","shape","required","dispatch","useDispatch","useSelector","direction","align","w","p","border","borderColor","borderStyle","borderRadius","validationSchema","onSubmit","values","resetForm","alert","addContact","props","type","pattern","title","id","field","form","isInvalid","errors","touched","htmlFor","mb","mx","fontWeight","bg","color","QueryInputId","placeholder","onChange","e","preventDefault","target","visibleContacts","templateAreas","templateColumns","gap","colSpan","pl","area","onClick","deleteContact","useEffect","fetchContacts","Loader"],"sourceRoot":""}