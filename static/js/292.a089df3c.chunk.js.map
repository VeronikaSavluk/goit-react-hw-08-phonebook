{"version":3,"file":"static/js/292.a089df3c.chunk.js","mappings":"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","sources":["components/RegisterForm.js","page/Register.js"],"sourcesContent":["import PropTypes from 'prop-types';\nimport { useDispatch } from 'react-redux';\nimport { Formik, Form, Field } from 'formik';\nimport * as yup from 'yup';\nimport { register } from 'redux/auth/operations';\nimport {\n    FormControl,\n    FormLabel,\n    Input,\n    Button,\n    FormErrorMessage,\n    FormHelperText,\n    Flex,\n    Box\n} from '@chakra-ui/react';\n\nconst initialValues = {\n    name: '',\n    email: '',\n    password: ''\n};\n\nconst schema = yup.object().shape({\n    name: yup.string().required(),\n    email: yup.string().email().required(),\n    password: yup.string().required(),\n});\n\nconst RegisterForm = () => {\n    const dispatch = useDispatch();\n\n    const handleSubmit = (values, { resetForm }) => {\n        dispatch(register(values));\n        resetForm();\n    };\n\n    return (\n        <Flex direction='column'\n            align='center'\n            w={300} p={10}\n            border={2}\n            borderColor='#FFFFF0'\n            borderStyle='solid'\n            borderRadius={10}\n        >\n            <Formik\n                initialValues={initialValues}\n                validationSchema={schema}\n                onSubmit={handleSubmit}\n            >\n                {(props) => (\n                    <Form>\n                        <Field\n                            type='text'\n                            name='name'\n                            pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n                            required\n                        >\n                            {({ field, form }) => (\n                                <FormControl isInvalid={form.errors.name && form.values.name === ''}>\n                                    <FormLabel mb={10}>Name</FormLabel>\n                                    <Input {...field} htmlSize={30}\n                                        borderRadius={5}\n                                        mb={10} p={2} color='#4d4c4c'\n                                    />\n                                    <Box h={35} w={255} fontSize={7}>\n                                        {form.values.name !== '' ? (<FormHelperText>\n                                            Name may contain only letters, apostrophe, dash and spaces.\n                                            For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\n                                        </FormHelperText>) : null}\n                                        <FormErrorMessage color='red'>Name is required</FormErrorMessage>\n                                    </Box>\n                                </FormControl>\n                            )}\n                        </Field>\n                        <Field\n                            type='email'\n                            name='email'\n                            pattern=\"[a-z0-9._%+-]+@[a-z0-9.-]+\\.[a-z]{2,4}$\"\n                            required\n                        >\n                            {({ field, form }) => (\n                                <FormControl isInvalid={form.errors.name && form.values.email === ''}>\n                                    <FormLabel mb={10}>Email</FormLabel>\n                                    <Input {...field} htmlSize={30}\n                                        borderRadius={5}\n                                        mb={10} p={2} color='#4d4c4c'\n                                    />\n                                    <Box h={35} w={255} fontSize={7}>\n                                        {form.values.email !== '' ? (<FormHelperText>\n                                            Email must be a valid email address\n                                        </FormHelperText>) : null}\n                                        <FormErrorMessage color='red'>Email is required</FormErrorMessage>\n                                    </Box>\n                                </FormControl>\n                            )}\n                        </Field>\n                        <Field\n                            type='password'\n                            name='password'\n                            required\n                        >\n                            {({ field, form }) => (\n                                    <FormControl isInvalid={form.errors.name && form.values.password === ''}>\n                                        <FormLabel mb={10}>Password</FormLabel>\n                                        <Input {...field} htmlSize={30}\n                                            borderRadius={5}\n                                            mb={10} p={2} color='#4d4c4c'\n                                        />\n                                        <Box h={35} w={255} fontSize={7}>\n                                            <FormErrorMessage color='red'>Password is required</FormErrorMessage>\n                                        </Box>\n                                    </FormControl>\n                                )\n                            }\n                        </Field>\n                        <Button p={2} mx='auto' mb={10} w={100}\n                            fontWeight='900'\n                            border={1} borderStyle='solid'\n                            borderColor='#f1b61ff1' borderRadius={5}\n                            bg='#f1b61ff1' color='#4d4c4c'\n                            type='submit' name='Register'>Register\n                        </Button>\n                    </Form>\n                )}\n            </Formik>\n        </Flex>\n    );\n};\n\nRegisterForm.propTypes = {\n    handleSubmit: PropTypes.func,\n};\n\nexport default RegisterForm;","import PropTypes from 'prop-types';\nimport { useSelector } from 'react-redux';\nimport RegisterForm from 'components/RegisterForm';\nimport { selectError } from '../redux/auth/selectors';\nimport { Flex, Box, Heading, Text} from '@chakra-ui/react';\n\nconst Register = () => {\n    const error = useSelector(selectError);\n\n    return <Flex direction='column' align='center'>\n        <Heading as='h2' mt={20} mb={30}\n            fontSize={30} fontWeight={500}\n            textAlign='center' noOfLines={1}\n        >Register</Heading>\n        <RegisterForm />\n        <Box mt={10} h={30}>\n            {error === 'User creation error' && (\n            <Text fontSize={16}>\n                User creation error/such user is already registered.\n            </Text>)}\n        </Box>\n    </Flex>\n};\n\nRegister.propTypes = {\n    error: PropTypes.string,\n};\n\nexport default Register;"],"names":["initialValues","name","email","password","schema","yup","shape","required","dispatch","useDispatch","direction","align","w","p","border","borderColor","borderStyle","borderRadius","validationSchema","onSubmit","values","resetForm","register","props","type","pattern","field","form","isInvalid","errors","mb","htmlSize","color","h","fontSize","mx","fontWeight","bg","error","useSelector","selectError","as","mt","textAlign","noOfLines"],"sourceRoot":""}