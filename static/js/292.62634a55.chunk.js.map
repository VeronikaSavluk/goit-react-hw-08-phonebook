{"version":3,"file":"static/js/292.62634a55.chunk.js","mappings":"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","sources":["components/RegisterForm.js","page/Register.js"],"sourcesContent":["import PropTypes from 'prop-types';\nimport { useDispatch } from 'react-redux';\nimport { Formik, Form, Field } from 'formik';\nimport * as yup from 'yup';\nimport { register } from 'redux/auth/operations';\nimport {\n    FormControl,\n    Input,\n    Button,\n    FormErrorMessage,\n    FormHelperText,\n    Flex,\n    Box\n} from '@chakra-ui/react';\n\nconst initialValues = {\n    name: '',\n    email: '',\n    password: ''\n};\n\nconst schema = yup.object().shape({\n    name: yup.string().required(),\n    email: yup.string().email().required(),\n    password: yup.string().required(),\n});\n\nconst RegisterForm = () => {\n    const dispatch = useDispatch();\n\n    const handleSubmit = (values, { resetForm }) => {\n        dispatch(register(values));\n        resetForm();\n    };\n\n    return (\n        <Flex direction='column'\n            align='center'\n            w={280} h={290} p={3}\n            border={2}\n            borderColor='#FFFFF0'\n            borderStyle='solid'\n            borderRadius={10}\n        >\n            <Formik\n                initialValues={initialValues}\n                validationSchema={schema}\n                onSubmit={handleSubmit}\n            >\n                {(props) => (\n                    <Form>\n                        <Field\n                            type='text'\n                            name='name'\n                            required\n                        >\n                            {({ field, form }) => (\n                                <FormControl isInvalid={form.errors.name}>\n                                    <Input {...field} htmlSize='md' color='#FFFFF0' variant='flushed'\n                                        placeholder='Name'\n                                        _placeholder={{ opacity: 0.4, color: 'inherit' }}\n                                        focusBorderColor='#FFFFF0'\n                                        pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n                                    />\n                                    <Box h={34} w={255}>\n                                        {form.values.name !== '' ? (\n                                        <FormHelperText color='#FFFFF0' fontSize={7}>\n                                            Name may contain only letters, apostrophe, dash and spaces.\n                                            For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\n                                        </FormHelperText>) : null}\n                                        <FormErrorMessage fontSize={7} color='red'>\n                                            Name is required\n                                        </FormErrorMessage>\n                                    </Box>\n                                </FormControl>\n                            )}\n                        </Field>\n                        <Field\n                            type='email'\n                            name='email'\n                            required\n                        >\n                            {({ field, form }) => (\n                                <FormControl isInvalid={form.errors.name}>\n                                    <Input {...field} htmlSize='md' color='#FFFFF0' variant='flushed'\n                                        placeholder='Email'\n                                        _placeholder={{ opacity: 0.4, color: 'inherit' }}\n                                        focusBorderColor='#FFFFF0'\n                                        pattern=\"[a-z0-9._%+-]+@[a-z0-9.-]+\\.[a-z]{2,4}$\"\n                                    />\n                                    <Box h={34} w={255}>\n                                        {form.values.email !== '' ? (\n                                        <FormHelperText fontSize={7} color='#FFFFF0'>\n                                            Email must be a valid email address\n                                        </FormHelperText>) : null}\n                                        <FormErrorMessage fontSize={7} color='red'>Email is required</FormErrorMessage>\n                                    </Box>\n                                </FormControl>\n                            )}\n                        </Field>\n                        <Field\n                            type='password'\n                            name='password'\n                            required\n                        >\n                            {({ field, form }) => (\n                                    <FormControl isInvalid={form.errors.name}>\n                                        <Input {...field} htmlSize='md' color='#FFFFF0'\n                                            placeholder='Password'\n                                            _placeholder={{ opacity: 0.4, color: 'inherit' }}\n                                            focusBorderColor='#FFFFF0'\n                                            variant='flushed'\n                                        />\n                                        <Box h={34} w={255}>\n                                            <FormErrorMessage fontSize={7} color='red'>Password is required</FormErrorMessage>\n                                        </Box>\n                                    </FormControl>\n                                )\n                            }\n                        </Field>\n                        <Button p={2} w={100}\n                            fontSize={14} fontWeight='bold'\n                            type='submit' name='Register'>\n                            Register\n                        </Button>\n                    </Form>\n                )}\n            </Formik>\n        </Flex>\n    );\n};\n\nRegisterForm.propTypes = {\n    handleSubmit: PropTypes.func,\n};\n\nexport default RegisterForm;","import PropTypes from 'prop-types';\nimport { useSelector } from 'react-redux';\nimport RegisterForm from 'components/RegisterForm';\nimport { selectError } from '../redux/auth/selectors';\nimport { Flex, Box, Heading, Text} from '@chakra-ui/react';\n\nconst Register = () => {\n    const error = useSelector(selectError);\n\n    return <Flex direction='column' align='center'>\n        <Heading as='h2' mt={20} mb={30}\n            fontSize={{ base: '2xl', md: '4xl' }}\n            fontWeight='medium'\n            textAlign='center' noOfLines={1}\n        >Register</Heading>\n        <RegisterForm />\n        <Box mt={10} h={30}>\n            {error === 'User creation error' && (\n            <Text fontSize={16}>\n                User creation error/such user is already registered.\n            </Text>)}\n        </Box>\n    </Flex>\n};\n\nRegister.propTypes = {\n    error: PropTypes.string,\n};\n\nexport default Register;"],"names":["initialValues","name","email","password","schema","yup","shape","required","dispatch","useDispatch","direction","align","w","h","p","border","borderColor","borderStyle","borderRadius","validationSchema","onSubmit","values","resetForm","register","props","type","field","form","isInvalid","errors","htmlSize","color","variant","placeholder","_placeholder","opacity","focusBorderColor","pattern","fontSize","fontWeight","error","useSelector","selectError","as","mt","mb","base","md","textAlign","noOfLines"],"sourceRoot":""}