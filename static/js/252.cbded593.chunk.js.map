{"version":3,"file":"static/js/252.cbded593.chunk.js","mappings":"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","sources":["../node_modules/reselect/es/defaultMemoize.js","../node_modules/reselect/es/index.js","redux/contacts/selectors.js","components/ContactForm.js","components/FilterContactListItem.js","../node_modules/nanoid/index.browser.js","components/ContactList.js","page/Contacts.js"],"sourcesContent":["// Cache implementation based on Erik Rasmussen's `lru-memoize`:\n// https://github.com/erikras/lru-memoize\nvar NOT_FOUND = 'NOT_FOUND';\n\nfunction createSingletonCache(equals) {\n  var entry;\n  return {\n    get: function get(key) {\n      if (entry && equals(entry.key, key)) {\n        return entry.value;\n      }\n\n      return NOT_FOUND;\n    },\n    put: function put(key, value) {\n      entry = {\n        key: key,\n        value: value\n      };\n    },\n    getEntries: function getEntries() {\n      return entry ? [entry] : [];\n    },\n    clear: function clear() {\n      entry = undefined;\n    }\n  };\n}\n\nfunction createLruCache(maxSize, equals) {\n  var entries = [];\n\n  function get(key) {\n    var cacheIndex = entries.findIndex(function (entry) {\n      return equals(key, entry.key);\n    }); // We found a cached entry\n\n    if (cacheIndex > -1) {\n      var entry = entries[cacheIndex]; // Cached entry not at top of cache, move it to the top\n\n      if (cacheIndex > 0) {\n        entries.splice(cacheIndex, 1);\n        entries.unshift(entry);\n      }\n\n      return entry.value;\n    } // No entry found in cache, return sentinel\n\n\n    return NOT_FOUND;\n  }\n\n  function put(key, value) {\n    if (get(key) === NOT_FOUND) {\n      // TODO Is unshift slow?\n      entries.unshift({\n        key: key,\n        value: value\n      });\n\n      if (entries.length > maxSize) {\n        entries.pop();\n      }\n    }\n  }\n\n  function getEntries() {\n    return entries;\n  }\n\n  function clear() {\n    entries = [];\n  }\n\n  return {\n    get: get,\n    put: put,\n    getEntries: getEntries,\n    clear: clear\n  };\n}\n\nexport var defaultEqualityCheck = function defaultEqualityCheck(a, b) {\n  return a === b;\n};\nexport function createCacheKeyComparator(equalityCheck) {\n  return function areArgumentsShallowlyEqual(prev, next) {\n    if (prev === null || next === null || prev.length !== next.length) {\n      return false;\n    } // Do this in a for loop (and not a `forEach` or an `every`) so we can determine equality as fast as possible.\n\n\n    var length = prev.length;\n\n    for (var i = 0; i < length; i++) {\n      if (!equalityCheck(prev[i], next[i])) {\n        return false;\n      }\n    }\n\n    return true;\n  };\n}\n// defaultMemoize now supports a configurable cache size with LRU behavior,\n// and optional comparison of the result value with existing values\nexport function defaultMemoize(func, equalityCheckOrOptions) {\n  var providedOptions = typeof equalityCheckOrOptions === 'object' ? equalityCheckOrOptions : {\n    equalityCheck: equalityCheckOrOptions\n  };\n  var _providedOptions$equa = providedOptions.equalityCheck,\n      equalityCheck = _providedOptions$equa === void 0 ? defaultEqualityCheck : _providedOptions$equa,\n      _providedOptions$maxS = providedOptions.maxSize,\n      maxSize = _providedOptions$maxS === void 0 ? 1 : _providedOptions$maxS,\n      resultEqualityCheck = providedOptions.resultEqualityCheck;\n  var comparator = createCacheKeyComparator(equalityCheck);\n  var cache = maxSize === 1 ? createSingletonCache(comparator) : createLruCache(maxSize, comparator); // we reference arguments instead of spreading them for performance reasons\n\n  function memoized() {\n    var value = cache.get(arguments);\n\n    if (value === NOT_FOUND) {\n      // @ts-ignore\n      value = func.apply(null, arguments);\n\n      if (resultEqualityCheck) {\n        var entries = cache.getEntries();\n        var matchingEntry = entries.find(function (entry) {\n          return resultEqualityCheck(entry.value, value);\n        });\n\n        if (matchingEntry) {\n          value = matchingEntry.value;\n        }\n      }\n\n      cache.put(arguments, value);\n    }\n\n    return value;\n  }\n\n  memoized.clearCache = function () {\n    return cache.clear();\n  };\n\n  return memoized;\n}","import { defaultMemoize, defaultEqualityCheck } from './defaultMemoize';\nexport { defaultMemoize, defaultEqualityCheck };\n\nfunction getDependencies(funcs) {\n  var dependencies = Array.isArray(funcs[0]) ? funcs[0] : funcs;\n\n  if (!dependencies.every(function (dep) {\n    return typeof dep === 'function';\n  })) {\n    var dependencyTypes = dependencies.map(function (dep) {\n      return typeof dep === 'function' ? \"function \" + (dep.name || 'unnamed') + \"()\" : typeof dep;\n    }).join(', ');\n    throw new Error(\"createSelector expects all input-selectors to be functions, but received the following types: [\" + dependencyTypes + \"]\");\n  }\n\n  return dependencies;\n}\n\nexport function createSelectorCreator(memoize) {\n  for (var _len = arguments.length, memoizeOptionsFromArgs = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n    memoizeOptionsFromArgs[_key - 1] = arguments[_key];\n  }\n\n  var createSelector = function createSelector() {\n    for (var _len2 = arguments.length, funcs = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n      funcs[_key2] = arguments[_key2];\n    }\n\n    var _recomputations = 0;\n\n    var _lastResult; // Due to the intricacies of rest params, we can't do an optional arg after `...funcs`.\n    // So, start by declaring the default value here.\n    // (And yes, the words 'memoize' and 'options' appear too many times in this next sequence.)\n\n\n    var directlyPassedOptions = {\n      memoizeOptions: undefined\n    }; // Normally, the result func or \"output selector\" is the last arg\n\n    var resultFunc = funcs.pop(); // If the result func is actually an _object_, assume it's our options object\n\n    if (typeof resultFunc === 'object') {\n      directlyPassedOptions = resultFunc; // and pop the real result func off\n\n      resultFunc = funcs.pop();\n    }\n\n    if (typeof resultFunc !== 'function') {\n      throw new Error(\"createSelector expects an output function after the inputs, but received: [\" + typeof resultFunc + \"]\");\n    } // Determine which set of options we're using. Prefer options passed directly,\n    // but fall back to options given to createSelectorCreator.\n\n\n    var _directlyPassedOption = directlyPassedOptions,\n        _directlyPassedOption2 = _directlyPassedOption.memoizeOptions,\n        memoizeOptions = _directlyPassedOption2 === void 0 ? memoizeOptionsFromArgs : _directlyPassedOption2; // Simplifying assumption: it's unlikely that the first options arg of the provided memoizer\n    // is an array. In most libs I've looked at, it's an equality function or options object.\n    // Based on that, if `memoizeOptions` _is_ an array, we assume it's a full\n    // user-provided array of options. Otherwise, it must be just the _first_ arg, and so\n    // we wrap it in an array so we can apply it.\n\n    var finalMemoizeOptions = Array.isArray(memoizeOptions) ? memoizeOptions : [memoizeOptions];\n    var dependencies = getDependencies(funcs);\n    var memoizedResultFunc = memoize.apply(void 0, [function recomputationWrapper() {\n      _recomputations++; // apply arguments instead of spreading for performance.\n\n      return resultFunc.apply(null, arguments);\n    }].concat(finalMemoizeOptions)); // If a selector is called with the exact same arguments we don't need to traverse our dependencies again.\n\n    var selector = memoize(function dependenciesChecker() {\n      var params = [];\n      var length = dependencies.length;\n\n      for (var i = 0; i < length; i++) {\n        // apply arguments instead of spreading and mutate a local list of params for performance.\n        // @ts-ignore\n        params.push(dependencies[i].apply(null, arguments));\n      } // apply arguments instead of spreading for performance.\n\n\n      _lastResult = memoizedResultFunc.apply(null, params);\n      return _lastResult;\n    });\n    Object.assign(selector, {\n      resultFunc: resultFunc,\n      memoizedResultFunc: memoizedResultFunc,\n      dependencies: dependencies,\n      lastResult: function lastResult() {\n        return _lastResult;\n      },\n      recomputations: function recomputations() {\n        return _recomputations;\n      },\n      resetRecomputations: function resetRecomputations() {\n        return _recomputations = 0;\n      }\n    });\n    return selector;\n  }; // @ts-ignore\n\n\n  return createSelector;\n}\nexport var createSelector = /* #__PURE__ */createSelectorCreator(defaultMemoize);\n// Manual definition of state and output arguments\nexport var createStructuredSelector = function createStructuredSelector(selectors, selectorCreator) {\n  if (selectorCreator === void 0) {\n    selectorCreator = createSelector;\n  }\n\n  if (typeof selectors !== 'object') {\n    throw new Error('createStructuredSelector expects first argument to be an object ' + (\"where each property is a selector, instead received a \" + typeof selectors));\n  }\n\n  var objectKeys = Object.keys(selectors);\n  var resultSelector = selectorCreator( // @ts-ignore\n  objectKeys.map(function (key) {\n    return selectors[key];\n  }), function () {\n    for (var _len3 = arguments.length, values = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {\n      values[_key3] = arguments[_key3];\n    }\n\n    return values.reduce(function (composition, value, index) {\n      composition[objectKeys[index]] = value;\n      return composition;\n    }, {});\n  });\n  return resultSelector;\n};","import { createSelector } from \"@reduxjs/toolkit\";\n\nexport const selectItems = state => state.contacts.items;\nexport const selectIsLoading = state => state.contacts.isLoading;\nexport const selectError = state => state.contacts.error;\nexport const selectFilter = state => state.filter;\n\nexport const selectVisibleContacts = createSelector(\n  [selectItems, selectFilter],\n  (items, setFilter) => {\n    switch (setFilter) {\n      case setFilter:\n        return items.filter(contact => contact.name.toLowerCase().includes(setFilter));\n      default:\n        return items;\n    }\n  }\n);","import PropTypes from 'prop-types';\nimport { useDispatch } from 'react-redux';\nimport {addContact} from 'redux/contacts/operations';\nimport { useSelector } from 'react-redux';\nimport { selectItems } from 'redux/contacts/selectors';\nimport { Formik, Form, Field } from 'formik';\nimport * as yup from 'yup';\nimport {\n    FormControl,\n    FormLabel,\n    Input,\n    Button,\n    FormErrorMessage,\n    FormHelperText,\n    Flex,\n    Box\n} from '@chakra-ui/react';\n\nconst initialValues = {\n    name: '',\n    number: ''\n};\n\nconst schema = yup.object().shape({\n    name: yup.string().required(),\n    number: yup.string().required(),\n});\n\nfunction ContactForm() {\n    const dispatch = useDispatch();\n    const items = useSelector(selectItems);\n    const handleSubmit = (values, { resetForm }) => {\n        if (items.find(contact => contact.name === values.name)) {\n            alert(`${values.name} is already in contacts`);\n            return;\n        };\n        dispatch(addContact(values));\n        resetForm();\n    };\n\n    return (\n        <Flex direction='column'\n            align='center'\n            w={300} p={10}\n            border={2}\n            borderColor='#FFFFF0'\n            borderStyle='solid'\n            borderRadius={10}\n        >\n            <Formik\n            initialValues={initialValues}\n            validationSchema={schema}\n            onSubmit={handleSubmit}\n            >\n                {(props) => (\n                    <Form >\n                        <Field\n                            type='text'\n                            name='name'\n                            pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n                            required\n                        >\n                            {({ field, form }) => (\n                                <FormControl isInvalid={form.errors.name}>\n                                    <FormLabel mb={10}>Name</FormLabel>\n                                    <Input {...field} htmlSize={30}\n                                        borderRadius={5}\n                                        mb={10} p={2} color='#4d4c4c'\n                                    />\n                                    <Box h={35} w={255} fontSize={7}>\n                                        {form.values.name !== '' ? (<FormHelperText>\n                                            Name may contain only letters, apostrophe, dash and spaces.\n                                            For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\n                                        </FormHelperText>) : null}\n                                        <FormErrorMessage color='red'>Name is required</FormErrorMessage>\n                                    </Box>\n                                </FormControl>\n                            )}\n                        </Field>\n                        <Field\n                            type='tel'\n                            name='number'\n                            pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n                            required\n                        >\n                            {({ field, form }) => (\n                                <FormControl isInvalid={form.errors.name}>\n                                    <FormLabel mb={10}>Number</FormLabel>\n                                    <Input {...field} htmlSize={30}\n                                        borderRadius={5}\n                                        mb={10} p={4} color='#4d4c4c'\n                                    />\n                                    <Box h={35} w={255} fontSize={7}>\n                                        {form.values.number !== '' ? (<FormHelperText>\n                                            Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\n                                        </FormHelperText>) : null}\n                                        <FormErrorMessage color='red'>Number is required</FormErrorMessage>\n                                    </Box>\n                                </FormControl>\n                            )}\n                        </Field>\n                        <Button p={2} mx='auto' mb={10}\n                            w={120} fontSize={14}\n                            fontWeight='900'\n                            border='none' borderRadius={5}\n                            bg='#f1b61ff1' color='#4d4c4c'\n                            type='submit' name='Add contact'>Add contact\n                        </Button>\n                    </Form>\n                )}\n            </Formik>\n        </Flex>\n    );\n};\n\nContactForm.propTypes = {\n    handleSubmit: PropTypes.func,\n};\n\nexport default ContactForm;","import PropTypes from 'prop-types';\nimport { useDispatch } from 'react-redux';\nimport { setFilter } from '../redux/contacts/filterSlice';\nimport { nanoid } from 'nanoid';\nimport { Box, Input } from '@chakra-ui/react';\n\nconst FilterContactList = () => {\n    const QueryInputId = nanoid();\n    const dispatch = useDispatch();\n\n    const handleChange = e => {\n        e.preventDefault();\n        const form = e.target;\n        dispatch(setFilter(form.value.toLowerCase()));\n    };\n\n    return (\n        <Box mb={10} border='none'\n            color='#4d4c4c'\n        >\n            <Input pl={4} borderRadius={5}\n                placeholder='Find contacts by name'\n                type='text'\n                name='value'\n                id={QueryInputId}\n                onChange={handleChange}\n        />\n        </Box>\n    )\n}\n\nFilterContactList.propTypes = {\n    handleChange: PropTypes.func,\n    QueryInputId: PropTypes.func,\n}\n\nexport default FilterContactList;","import { urlAlphabet } from './url-alphabet/index.js'\nlet random = bytes => crypto.getRandomValues(new Uint8Array(bytes))\nlet customRandom = (alphabet, defaultSize, getRandom) => {\n  let mask = (2 << (Math.log(alphabet.length - 1) / Math.LN2)) - 1\n  let step = -~((1.6 * mask * defaultSize) / alphabet.length)\n  return (size = defaultSize) => {\n    let id = ''\n    while (true) {\n      let bytes = getRandom(step)\n      let j = step\n      while (j--) {\n        id += alphabet[bytes[j] & mask] || ''\n        if (id.length === size) return id\n      }\n    }\n  }\n}\nlet customAlphabet = (alphabet, size = 21) =>\n  customRandom(alphabet, size, random)\nlet nanoid = (size = 21) => {\n  let id = ''\n  let bytes = crypto.getRandomValues(new Uint8Array(size))\n  while (size--) {\n    let byte = bytes[size] & 63\n    if (byte < 36) {\n      id += byte.toString(36)\n    } else if (byte < 62) {\n      id += (byte - 26).toString(36).toUpperCase()\n    } else if (byte < 63) {\n      id += '_'\n    } else {\n      id += '-'\n    }\n  }\n  return id\n}\nexport { nanoid, customAlphabet, customRandom, urlAlphabet, random }\n","import PropTypes from 'prop-types';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { selectVisibleContacts } from 'redux/contacts/selectors';\nimport {deleteContact} from 'redux/contacts/operations';\nimport {\n    List,\n    ListItem,\n    Grid,\n    GridItem,\n    Button\n} from '@chakra-ui/react';\n\nconst ContactList = () => {\n    const dispatch = useDispatch();\n    const visibleContacts = useSelector(selectVisibleContacts);\n\n    return (\n        <List>\n            {visibleContacts.map(({ id, name, number }) => (\n                <ListItem key={id}>\n                    <Grid templateAreas={`'name number button'`}\n                        templateColumns='repeat(5, 1fr)'\n                        justifyItems='end' gap='1'>\n                        <GridItem colSpan={2} pl={3} justifySelf='start' area={'name'}>{name}:</GridItem>\n                        <GridItem colSpan={2} pl={3} area={'number'}>{number}</GridItem>\n                        <GridItem colSpan={1} area={'button'}>\n                            <Button w={70} mb={5}\n                                fontSize={14} fontWeight='500'\n                                border='none' borderRadius={5}\n                                bg='#f1b61ff1' color='#4d4c4c'\n                                type='submit' name='Delete'\n                                onClick={() => dispatch(deleteContact(id))}\n                            >Delete</Button>\n                        </GridItem>\n                    </Grid>\n                </ListItem>\n            ))}\n        </List>\n    );\n};\n\nContactList.propTypes = {\n    visibleContacts: PropTypes.arrayOf(\n        PropTypes.exact({\n            name: PropTypes.string.isRequired,\n            number: PropTypes.string.isRequired,\n            id: PropTypes.string,\n        }),\n    ),\n};\n\nexport default ContactList;","import PropTypes from 'prop-types';\nimport { useEffect } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport {fetchContacts} from 'redux/contacts/operations';\nimport { selectIsLoading, selectError } from 'redux/contacts/selectors';\nimport ContactForm from 'components/ContactForm';\nimport FilterContactList from 'components/FilterContactListItem';\nimport Loader from 'components/Loader';\nimport ContactList from 'components/ContactList';\nimport { Flex, Box, Center, Heading, Grid} from '@chakra-ui/react';\n\nconst Contacts = () => {\n    const dispatch = useDispatch();\n    const isLoading = useSelector(selectIsLoading);\n    const error = useSelector(selectError);\n\n    useEffect(() => {\n        dispatch(fetchContacts());\n    }, [dispatch]);\n\n    return <Flex direction='column' justifyContent='space-evenly'>\n        <Heading as='h2' mt={20} mb={30}\n            fontSize={40} fontWeight={700}\n            textAlign='center' noOfLines={1}\n        >Phonebook</Heading>\n        <Flex justifyContent='space-evenly'>\n            <ContactForm />\n            <Flex direction='column' w={500} align='stretch' ml={20}>\n                <Grid templateColumns={'1fr 2fr'} justifyItems='end' alignItems='center'>\n                    <Heading as='h3' mb={10}\n                        fontSize={30} fontWeight={500}\n                        textAlign='center' noOfLines={1}\n                        justifySelf='start'\n                    >Contacts</Heading>\n                    <FilterContactList />\n                </Grid>\n                <Center mb={10} h={20}>\n                    {isLoading && !error && <Loader />}\n                    {error && <Box>{error}</Box>}\n                </Center>\n                <ContactList />\n            </Flex>\n        </Flex>\n    </Flex>\n};\n\nContacts.propTypes = {\n    isLoggedIn: PropTypes.bool,\n    error: PropTypes.string,\n};\n\nexport default Contacts;"],"names":["NOT_FOUND","defaultEqualityCheck","a","b","defaultMemoize","func","equalityCheckOrOptions","providedOptions","equalityCheck","_providedOptions$equa","_providedOptions$maxS","maxSize","resultEqualityCheck","comparator","prev","next","length","i","createCacheKeyComparator","cache","equals","entry","get","key","value","put","getEntries","clear","undefined","createSingletonCache","entries","cacheIndex","findIndex","splice","unshift","pop","createLruCache","memoized","arguments","apply","matchingEntry","find","clearCache","getDependencies","funcs","dependencies","Array","isArray","every","dep","dependencyTypes","map","name","join","Error","createSelectorCreator","memoize","_len","memoizeOptionsFromArgs","_key","createSelector","_len2","_key2","_lastResult","_recomputations","directlyPassedOptions","memoizeOptions","resultFunc","_directlyPassedOption","_directlyPassedOption2","finalMemoizeOptions","memoizedResultFunc","concat","selector","params","push","Object","assign","lastResult","recomputations","resetRecomputations","selectItems","state","contacts","items","selectIsLoading","isLoading","selectError","error","selectVisibleContacts","filter","setFilter","contact","toLowerCase","includes","initialValues","number","schema","yup","shape","required","dispatch","useDispatch","useSelector","direction","align","w","p","border","borderColor","borderStyle","borderRadius","validationSchema","onSubmit","values","resetForm","alert","addContact","props","type","pattern","field","form","isInvalid","errors","mb","htmlSize","color","h","fontSize","mx","fontWeight","bg","QueryInputId","size","id","bytes","crypto","getRandomValues","Uint8Array","byte","toString","toUpperCase","nanoid","pl","placeholder","onChange","e","preventDefault","target","visibleContacts","templateAreas","templateColumns","justifyItems","gap","colSpan","justifySelf","area","onClick","deleteContact","useEffect","fetchContacts","justifyContent","as","mt","textAlign","noOfLines","ml","alignItems","Loader"],"sourceRoot":""}