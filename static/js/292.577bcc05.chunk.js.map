{"version":3,"file":"static/js/292.577bcc05.chunk.js","mappings":"qRAEaA,EAAYC,EAAAA,GAAAA,IAAH,sJASTC,EAAQD,EAAAA,GAAAA,GAAH,gEAKLE,EAAYF,EAAAA,GAAAA,IAAH,4DAITG,EAAeH,EAAAA,GAAAA,EAAH,0C,qLCNnBI,GAAcC,EAAAA,EAAAA,MACdC,GAAeD,EAAAA,EAAAA,MACfE,GAAkBF,EAAAA,EAAAA,MAElBG,EAAgB,CAClBC,KAAM,GACNC,MAAO,GACPC,SAAU,IAGRC,EAASC,EAAAA,KAAaC,MAAM,CAC9BL,KAAMI,EAAAA,KAAaE,WACnBL,MAAOG,EAAAA,KAAaH,QAAQK,WAC5BJ,SAAUE,EAAAA,OAqFd,EAlFqB,WACjB,IAAMG,GAAWC,EAAAA,EAAAA,MAMjB,OACI,SAAC,KAAD,CAAMC,UAAU,SACZC,MAAM,SACNC,EAAG,IAAKC,EAAG,GACXC,OAAQ,EACRC,YAAY,UACZC,YAAY,QACZC,aAAc,GANlB,UAQI,SAAC,KAAD,CACAjB,cAAeA,EACfkB,iBAAkBd,EAClBe,SAjBa,SAACC,EAAD,GAA0B,IAAhBC,EAAe,EAAfA,UAC3Bb,GAASc,EAAAA,EAAAA,IAASF,IAClBC,GACH,EAWO,SAKK,SAACE,GAAD,OACG,UAAC,KAAD,YACI,SAAC,KAAD,CACIC,KAAK,OACLvB,KAAK,OACLwB,QAAQ,yHACRC,MAAM,yIACNC,GAAI/B,EALR,SAOK,gBAAGgC,EAAH,EAAGA,MAAOC,EAAV,EAAUA,KAAV,OACG,UAAC,KAAD,CAAaC,UAAWD,EAAKE,OAAO9B,MAAQ4B,EAAKG,QAAQ/B,KAAzD,WACI,SAAC,KAAD,CAAWgC,QAASrC,EAAasC,GAAI,GAArC,mBACA,SAAC,MAAD,kBAAWN,GAAX,IAAkBM,GAAI,GAAIrB,EAAG,MAC7B,SAAC,KAAD,UAAmBgB,EAAKE,OAAO9B,SAJtC,KAQL,SAAC,KAAD,CACIuB,KAAK,QACLvB,KAAK,QACLwB,QAAQ,2CACRC,MAAM,sCACNC,GAAI7B,EACJS,UAAQ,EANZ,SAQK,gBAAGqB,EAAH,EAAGA,MAAOC,EAAV,EAAUA,KAAV,OACG,UAAC,KAAD,CAAaC,UAAWD,EAAKE,OAAO9B,MAAQ4B,EAAKG,QAAQ/B,KAAzD,WACI,SAAC,KAAD,CAAWgC,QAASnC,EAAcoC,GAAI,GAAtC,oBACA,SAAC,MAAD,kBAAWN,GAAX,IAAkBM,GAAI,GAAIrB,EAAG,MAC7B,SAAC,KAAD,UAAmBgB,EAAKE,OAAO9B,SAJtC,KAQL,SAAC,KAAD,CACIuB,KAAK,WACLvB,KAAK,WACL0B,GAAI5B,EACJQ,UAAQ,EAJZ,SAMK,gBAAGqB,EAAH,EAAGA,MAAOC,EAAV,EAAUA,KAAV,OACG,UAAC,KAAD,CAAaC,UAAWD,EAAKE,OAAO9B,MAAQ4B,EAAKG,QAAQ/B,KAAzD,WACI,SAAC,KAAD,CAAWgC,QAASlC,EAAiBmC,GAAI,GAAzC,uBACA,SAAC,MAAD,kBAAWN,GAAX,IAAkBM,GAAI,GAAIrB,EAAG,MAC7B,SAAC,KAAD,UAAmBgB,EAAKE,OAAO9B,SAJtC,KAQL,SAAC,KAAD,CAAQY,EAAG,EAAGsB,GAAG,OAAOD,GAAI,GAAItB,EAAG,IAC/BwB,WAAW,MACXtB,OAAQ,EAAGE,YAAY,QACvBD,YAAY,YAAYE,aAAc,GACtCoB,GAAG,YAAYC,MAAM,UACrBd,KAAK,SAASvB,KAAK,WALvB,wBA/CP,KA2DhB,E,oBC7FD,EAZiB,WACb,IAAMsC,GAAQC,EAAAA,EAAAA,IAAYC,EAAAA,IAE1B,OACI,4BACI,sCACA,SAAC,EAAD,IACW,wBAAVF,IAAoC,SAAC,KAAD,qEAGhD,C","sources":["components/Container.styled.js","components/RegisterForm.js","page/Register.js"],"sourcesContent":["import styled from 'styled-components';\n\nexport const Container = styled.div`\ndisplay: flex;\nflex-direction: column;\nmargin: 0;\npadding: 20px;\nwidth: 320px;\nmin-height: 796px;\nbackground: #8FBC8F;\n`;\nexport const Title = styled.h2`\nmargin-botton: 10px;\nfont-size: 18px;\n`;\n\nexport const LoaderBox = styled.div`\nheight: 18px;\ntext-align: center;\n`;\nexport const ErrorMessage = styled.p`\n font-size: 16px;\n`;","import { useDispatch } from \"react-redux\";\nimport { nanoid } from \"nanoid\";\nimport * as yup from \"yup\";\nimport { Formik, Form, Field } from \"formik\";\nimport {register} from \"redux/auth/operations\";\nimport {\n    FormControl,\n    FormLabel,\n    Input,\n    Button,\n    FormErrorMessage,\n    Flex\n} from \"@chakra-ui/react\";\n\nconst NameInputId = nanoid();\nconst EmailInputId = nanoid();\nconst PasswordInputId = nanoid();\n\nconst initialValues = {\n    name: '',\n    email: '',\n    password: ''\n};\n\nconst schema = yup.object().shape({\n    name: yup.string().required(),\n    email: yup.string().email().required(),\n    password: yup.mixed(),\n});\n\nconst RegisterForm = () => {\n    const dispatch = useDispatch();\n    const handleSubmit = (values, {resetForm}) => {\n        dispatch(register(values));\n        resetForm();\n    };\n\n    return (\n        <Flex direction='column'\n            align='center'\n            w={300} p={10}\n            border={2}\n            borderColor='#FFFFF0'\n            borderStyle='solid'\n            borderRadius={15}\n        >\n            <Formik\n            initialValues={initialValues}\n            validationSchema={schema}\n            onSubmit={handleSubmit}\n            >\n                {(props) => (\n                    <Form>\n                        <Field\n                            type=\"text\"\n                            name=\"name\"\n                            pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n                            title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n                            id={NameInputId}\n                        >\n                            {({ field, form }) => (\n                                <FormControl isInvalid={form.errors.name && form.touched.name}>\n                                    <FormLabel htmlFor={NameInputId} mb={10}>Name</FormLabel>\n                                    <Input {...field} mb={10} p={4}/>\n                                    <FormErrorMessage>{form.errors.name}</FormErrorMessage>\n                                </FormControl>\n                            )}\n                        </Field>\n                        <Field\n                            type=\"email\"\n                            name=\"email\"\n                            pattern=\"[a-z0-9._%+-]+@[a-z0-9.-]+\\.[a-z]{2,4}$\"\n                            title=\"Email must be a valid email address\"\n                            id={EmailInputId}\n                            required\n                        >\n                            {({ field, form }) => (\n                                <FormControl isInvalid={form.errors.name && form.touched.name}>\n                                    <FormLabel htmlFor={EmailInputId} mb={10}>Email</FormLabel>\n                                    <Input {...field} mb={10} p={4}/>\n                                    <FormErrorMessage>{form.errors.name}</FormErrorMessage>\n                            </FormControl>\n                        )}\n                        </Field>\n                        <Field\n                            type=\"password\"\n                            name=\"password\"\n                            id={PasswordInputId}\n                            required\n                        >\n                            {({ field, form }) => (\n                                <FormControl isInvalid={form.errors.name && form.touched.name}>\n                                    <FormLabel htmlFor={PasswordInputId} mb={10}>Password</FormLabel>\n                                    <Input {...field} mb={10} p={4}/>\n                                    <FormErrorMessage>{form.errors.name}</FormErrorMessage>\n                                </FormControl>\n                        )}\n                         </Field>\n                        <Button p={2} mx='auto' mb={10} w={100}\n                            fontWeight='900'\n                            border={1} borderStyle='solid'\n                            borderColor='#f1b61ff1' borderRadius={15}\n                            bg='#f1b61ff1' color='#4d4c4c'\n                            type=\"submit\" name=\"Register\">Register\n                        </Button>\n                    </Form>\n                )}\n            </Formik>\n        </Flex>\n    )\n}\n\nexport default RegisterForm;","import { useSelector } from \"react-redux\";\nimport RegisterForm from \"components/RegisterForm\";\nimport { selectError } from \"../redux/auth/selectors\";\nimport { ErrorMessage } from \"components/Container.styled\";\n\nconst Register = () => {\n    const error = useSelector(selectError);\n\n    return (\n        <div>\n            <h1>Register</h1>\n            <RegisterForm />\n            {error === \"User creation error\" && (<ErrorMessage>User creation error/such user is already registered.</ErrorMessage>)}\n        </div>\n    )\n}\n\nexport default Register;"],"names":["Container","styled","Title","LoaderBox","ErrorMessage","NameInputId","nanoid","EmailInputId","PasswordInputId","initialValues","name","email","password","schema","yup","shape","required","dispatch","useDispatch","direction","align","w","p","border","borderColor","borderStyle","borderRadius","validationSchema","onSubmit","values","resetForm","register","props","type","pattern","title","id","field","form","isInvalid","errors","touched","htmlFor","mb","mx","fontWeight","bg","color","error","useSelector","selectError"],"sourceRoot":""}